pipeline {
    agent any

    environment {
        AWS_DEFAULT_REGION = 'us-east-1'
        AWS_ACCOUNT_ID = '369886907351' // Replace with your AWS account ID
        ECR_REPOSITORY_NAME = 'jjtech-demo' // Replace with your ECR repository name
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        ECR_REGISTRY = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}"
        CLUSTER_NAME = 'jjtech-demo-cluster' // Replace with your EKS cluster name
    }

    stages {
        stage('Setup') {
            steps {
                checkout scm
            }
        }

        stage('Continuous Integration') {
            steps {
                script {
                    sh """
                        cd mlapp
                        python3 -m venv venv
                        source venv/bin/activate
                        pip install --upgrade pip
                        pip install "pluggy<1.0,>=0.12"  
                        pip install -r requirements.txt
                        pip install tox
                        tox
                    """
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'ecr-login-password', variable: 'ECR_PASSWORD')]) {
                        sh 'echo $ECR_PASSWORD | docker login --username AWS --password-stdin $ECR_REGISTRY'
                    }
                    sh 'cd mlapp && docker build -t $ECR_REPOSITORY_NAME:$IMAGE_TAG .'
                    sh 'docker tag $ECR_REPOSITORY_NAME:$IMAGE_TAG $ECR_REGISTRY:$IMAGE_TAG'
                    sh 'docker push $ECR_REGISTRY:$IMAGE_TAG'
                    // Clean up Docker images after pushing
                    sh 'docker rmi $ECR_REGISTRY:$IMAGE_TAG'
                    sh 'docker rmi $ECR_REPOSITORY_NAME:$IMAGE_TAG'
                }
            }
        }

        stage('Install kubectl') {
            steps {
                script {
                    // Check if kubectl is already installed and at the desired version
                    sh """
                        if ! kubectl version --client --short | grep -q 'Client Version: v1.24.0'; then
                            curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.24.0/bin/linux/amd64/kubectl"
                            chmod +x ./kubectl
                            sudo mv ./kubectl /usr/local/bin/kubectl
                        fi
                    """
                }
            }
        }

        stage("Deploy to EKS") {
            steps {
                script {
                    // Configure kubectl to connect to the EKS cluster
                    withCredentials([awsCredentials(credentialsId: 'awsCredentials')]) {
                        sh "aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_DEFAULT_REGION"
                    }
                    // Replace the image tag in the deployment manifest and apply the manifest
                    sh """
                        sed -i 's/replaceImageTag/$IMAGE_TAG/g' k8s-manifest/deployment.yaml
                        kubectl apply -f k8s-manifest/deployment.yaml
                    """
                }
            }
        }
    }

    post {
        always {
            // Clean the workspace after the pipeline is finished
            cleanWs()
        }
    }
}
