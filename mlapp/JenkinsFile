pipeline {
    agent any
  
    environment {
        AWS_DEFAULT_REGION = 'us-east-1'
        AWS_ACCOUNT_ID = '369886907351' // Replace with your AWS account ID
        ECR_REPOSITORY_NAME = 'jjtech-demo' // Replace with your ECR repository name
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        ECR_REGISTRY = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}"
    }

    stages {
        stage('Setup') {
            steps {
                checkout scm
            }
        }
    
        stage('Continuous Integration') {
            steps {
                script {
                    sh '''
                        cd mlapp
                        python3 -m venv venv
                        source venv/bin/activate
                        pip install --upgrade pip
                        pip install "pluggy<1.0,>=0.12"  
                        pip install -r requirements.txt
                        pip install tox
                        tox
                    '''
                }
            }
        }
    
        stage('Build and Push Docker Image') {
            steps {
                script {
                    sh 'aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY'
                    sh 'cd mlapp && docker build -t $ECR_REPOSITORY_NAME:$IMAGE_TAG .'
                    sh 'docker tag $ECR_REPOSITORY_NAME:$IMAGE_TAG $ECR_REGISTRY:$IMAGE_TAG'
                    sh 'docker push $ECR_REGISTRY:$IMAGE_TAG'
                    sh 'docker rmi $ECR_REGISTRY:$IMAGE_TAG'
                    sh 'docker rmi $ECR_REPOSITORY_NAME:$IMAGE_TAG'
                }
            }
        }
    
        stage('Install kubectl') {
            steps {
                script {
                    sh '''
                        KUBECTL_VERSION="v1.24.0"
                        curl -LO "https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/linux/amd64/kubectl"
                        chmod +x ./kubectl
                        sudo mv ./kubectl /usr/local/bin/kubectl
                    '''
                }
            }
        }
        
        stage("Deploy to EKS") {
          environment {
              // These are specific to this stage
              REGION = 'us-east-1'
              CLUSTER_NAME = 'jjtech-demo-cluster'
        }
            steps {
                script {
                    // Using withCredentials to inject the AWS credentials
                    withCredentials([
                        [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_access_key_id']
                    ]) {
                        // Replace the image tag in the deployment manifest
                        sh "sed -i 's/replaceImageTag/${IMAGE_TAG}/g' k8s-manifest/deployment.yaml"
                        // Configure kubectl to connect to the EKS cluster
                        sh "aws eks update-kubeconfig --name ${CLUSTER_NAME} --region ${REGION}"
                        // Change to the k8s-manifest directory and apply the manifest
                        dir('k8s-manifest') {
                            // Apply the Kubernetes deployment manifest
                            sh "kubectl apply -f ."
                        }
                    }
                }
            }
        }

    }
  
    post {
        always {
            // Clean the workspace after the pipeline is finished
            cleanWs()
        }
    }
}
